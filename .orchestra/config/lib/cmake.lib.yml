#@ load("@ytt:data", "data")

#@ load("/lib/fn_args.lib.yml", "mandatory")
#@ load("/lib/shell.lib.yml", "expand_args")
#@ load("/lib/optimization_flavors.lib.yml", "typical_cmake_flavors")

#@yaml/text-templated-strings
---
#@ def cmake_default_cmdline_extra_flags(
#@  ):
- -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
- -DCMAKE_INSTALL_PREFIX="$ORCHESTRA_ROOT"
#@ end

#@yaml/text-templated-strings
---
#@ def _cmake(
#@  ):
- |
  cmake \
    (@= expand_args(cmake_default_cmdline_extra_flags()) @)
#@ end

#@ cmake = _cmake()[0].rstrip()

#@yaml/text-templated-strings
---
#@ def cmdline_cmake_base_configuration(
#@        cmake_build_type=mandatory,
#@        extra_compiler_flags="",
#@        extra_c_flags="",
#@        extra_cxx_flags="",
#@  ):
- -DCMAKE_C_COMPILER="(@= data.values.regular_c_compiler @)"
- -DCMAKE_CXX_COMPILER="(@= data.values.regular_cxx_compiler @)"
- -DCMAKE_C_FLAGS="(@= extra_compiler_flags @) (@= extra_c_flags @) (@= data.values.regular_c_flags @)"
- -DCMAKE_CXX_FLAGS="(@= extra_compiler_flags @) (@= extra_cxx_flags @) (@= data.values.regular_cxx_flags @)"
- -DCMAKE_EXE_LINKER_FLAGS="(@= data.values.regular_linker_flags @)"
- -DCMAKE_MODULE_LINKER_FLAGS="(@= data.values.regular_linker_flags @)"
- -DCMAKE_SHARED_LINKER_FLAGS="(@= data.values.regular_linker_flags @)"
- -DCMAKE_BUILD_RPATH="$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses"
- -DCMAKE_INSTALL_RPATH="$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses"
- -DCMAKE_BUILD_TYPE="(@= cmake_build_type @)"
#@ end

#@yaml/text-templated-strings
---
#@ def _cmake_base_configuration(
#@        cmake_build_type=mandatory,
#@        extra_compiler_flags="",
#@        extra_c_flags="",
#@        extra_cxx_flags="",
#@  ):
- |
  set(CMAKE_INSTALL_SO_NO_EXE 0)
  set(CMAKE_C_COMPILER "(@= data.values.regular_c_compiler @)")
  set(CMAKE_CXX_COMPILER "(@= data.values.regular_cxx_compiler @)")
  set(CMAKE_C_FLAGS "(@= extra_compiler_flags @) (@= extra_c_flags @) (@= data.values.regular_c_flags @) (@= data.values.use_old_glibc_cflags @)")
  set(CMAKE_CXX_FLAGS "(@= extra_compiler_flags @) (@= extra_cxx_flags @) (@= data.values.regular_cxx_flags @) (@= data.values.use_old_glibc_cflags @)")
  set(CMAKE_EXE_LINKER_FLAGS "(@= data.values.regular_linker_flags @) (@= data.values.use_old_glibc_ldflags @)")
  set(CMAKE_MODULE_LINKER_FLAGS "(@= data.values.regular_linker_flags @) (@= data.values.use_old_glibc_ldflags @)")
  set(CMAKE_SHARED_LINKER_FLAGS "(@= data.values.regular_linker_flags @) (@= data.values.use_old_glibc_ldflags @)")
  set(CMAKE_BUILD_RPATH "$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses")
  set(CMAKE_INSTALL_RPATH "$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses")
  set(CMAKE_BUILD_TYPE "(@= cmake_build_type @)")
#@ end

---
#@ def cmake_base_configuration(**opts):
#@   return _cmake_base_configuration(**opts)[0]
#@ end

---

#@ def _cmake_boost_configuration():
- -DBOOST_ROOT="$ORCHESTRA_ROOT"
- -DBoost_NO_BOOST_CMAKE=On
- -DBoost_NO_SYSTEM_PATHS=On
#@ end

#@ cmake_boost_configuration = _cmake_boost_configuration()

---

#@yaml/text-templated-strings
---
#@ def typical_cmake_builds(
#@        extra_cmake_args=[],
#@        build_system="Ninja",
#@        dependencies=[],
#@        build_dependencies=[],
#@        use_asan=False,
#@        source_url=None,
#@        pre_configure_script="",
#@        post_configure_script="",
#@        pre_install_script="",
#@        post_install_script="",
#@        test=False,
#@ ):

#@ for flavor, opts in typical_cmake_flavors(use_asan=use_asan).items():
(@= flavor @):
  configure: |
    (@- if pre_configure_script: @)
    (@= pre_configure_script @)
    (@ end -@)

    (@- if source_url: @)
    extract.sh "(@= source_url @)"
    (@ end -@)

    mkdir -p "$BUILD_DIR"

    cat > "$BUILD_DIR/toolchain.cmake" <<eof
    (@= cmake_base_configuration(cmake_build_type=opts["cmake_build_type"], extra_compiler_flags=opts["extra_compiler_flags"]) @)
    eof

    cd "$BUILD_DIR";
    (@= cmake @) \
      "$SOURCE_DIR" \
      -G"(@= build_system @)" \
      -DCMAKE_TOOLCHAIN_FILE="$BUILD_DIR/toolchain.cmake" \
      (@= expand_args(extra_cmake_args) @)

    (@- if post_configure_script: @)
    (@= post_configure_script @)
    (@ end -@)

  install: |
    (@- if pre_install_script: @)
    (@= pre_install_script @)
    (@ end -@)

    cmake --build "$BUILD_DIR" ${JOBS:+-j$JOBS}
    cmake --install "$BUILD_DIR"

    (@- if test: @)
    if test "$RUN_TESTS" -eq 1; then
      cd "$BUILD_DIR"
      ctest ${JOBS:+-j$JOBS}
      cd -
    fi
    (@ end -@)

    (@- if post_install_script: @)
    (@= post_install_script @)
    (@ end -@)

  #@ if/end dependencies:
  dependencies: #@ dependencies

  #@ if/end build_dependencies:
  build_dependencies: #@ build_dependencies

  #@ if/end opts["ndebug"] == False:
  ndebug: false

  #@ if/end test:
  test: #@ test
#@ end

#@ end
